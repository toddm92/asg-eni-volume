{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description"	: "Creates a VPC in 3 availability-zones, 6 subnets; 3 public, 3 private.",

  "Metadata" : {

    "AWS::CloudFormation::Interface" : {
    "ParameterGroups" : [
      {
        "Label"				: { "default" : "Tagging" },
        "Parameters"			: [ "Service", "StackEnv" ]
      }
    ],
    "ParameterLabels" : {
        "Service"			: { "default" : "Service name" },
        "StackEnv"			: { "default" : "Environment name" }
      }
    }
  },

  "Parameters" : {

    "Service" : {
        "Type"				: "String",
        "Default"			: "kafka-zookeepers",
        "Description"			: "Service name.",
        "AllowedPattern"		: "[-a-zA-Z0-9]*",
        "ConstraintDescription"		: "No spaces, dashes ok."
    },
    "StackEnv" : {
        "Type"				: "String",
        "Default"			: "test",
        "Description"			: "Environment name.",
        "AllowedPattern"		: "[-a-zA-Z0-9]*",
        "ConstraintDescription"		: "No spaces, dashes ok."
    }
  },

  "Mappings" : {

    "RegionMap": {
        "us-east-1"			: { "Abbr" : "ue1" },
        "eu-west-1"			: { "Abbr" : "ew1" },
        "ap-northeast-1"		: { "Abbr" : "an1" },
        "us-west-1"			: { "Abbr" : "uw1" },
        "us-west-2"			: { "Abbr" : "uw2" },
        "ap-southeast-1"		: { "Abbr" : "as1" },
        "ap-southeast-2"		: { "Abbr" : "as2" },
        "sa-east-1"			: { "Abbr" : "se1" },
        "eu-central-1"			: { "Abbr" : "ec1" }
    },
    "SubnetConfig" : {
        "VPC"			: { "CIDR" : "10.79.0.0/23",   "GW" : "NA",          "MASK" : "255.255.254.0" },
        "Public1"               : { "CIDR" : "10.79.0.0/26",   "GW" : "10.79.0.1",   "MASK" : "255.255.255.192" },
        "Public2"               : { "CIDR" : "10.79.0.64/26",  "GW" : "10.79.0.65",  "MASK" : "255.255.255.192" },
        "Public3"               : { "CIDR" : "10.79.0.128/26", "GW" : "10.79.0.129", "MASK" : "255.255.255.192" },
        "Private1"              : { "CIDR" : "10.79.1.0/26",   "GW" : "10.79.1.1",   "MASK" : "255.255.255.192" },
        "Private2"              : { "CIDR" : "10.79.1.64/26",  "GW" : "10.79.1.65",  "MASK" : "255.255.255.192" },
        "Private3"              : { "CIDR" : "10.79.1.128/26", "GW" : "10.79.1.129", "MASK" : "255.255.255.192" }
    }
  },

  "Resources" : {

    "ec2VPC" : {
      "Type" : "AWS::EC2::VPC",
        "Properties" : {
          "CidrBlock"			: { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ] },
          "EnableDnsSupport"		: "true",
          "EnableDnsHostnames"		: "true",
          "InstanceTenancy"		: "default",
        "Tags": [
            {
                "Key"			: "Name",
                "Value"			: { "Fn::Join" : [ "-",
					    [
					      { "Ref" : "Service" },
					      { "Ref" : "StackEnv" },
					       "vpc",
					      { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
					    ]
					  ]
					}
            }
        ]
      }
    },

    "ec2InternetGW" : {
      "Type" : "AWS::EC2::InternetGateway",
        "Properties" : {
        "Tags": [
            {
                "Key"			: "Name",
                "Value"			: { "Fn::Join" : [ "-",
				  	    [
					      { "Ref" : "Service" },
					      { "Ref" : "StackEnv" },
					       "igw",
					      { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
					    ]
				  	  ]
					}
            }
        ]
      }
    },

    "ec2AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "InternetGatewayId"		: { "Ref" : "ec2InternetGW" }
      }
    },

    "ec2PublicSubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Fn::FindInMap" : [ "SubnetConfig", "Public1", "CIDR" ] },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "0", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"			: "Service",
                "Value"			: { "Ref" : "Service" }
            },
            {
                "Key"			: "Gateway",
                "Value"			: { "Fn::FindInMap" : [ "SubnetConfig", "Public1", "GW" ] }
            },
            {
                "Key"			: "Netmask",
                "Value"			: { "Fn::FindInMap" : [ "SubnetConfig", "Public1", "MASK" ] }
            },
            {
                "Key"			: "Name",
                "Value"			: { "Fn::Join" : [ "-",
					    [
					      { "Ref" : "Service" },
					      { "Ref" : "StackEnv" },
					       "public-az1",
					      { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
					    ]
					  ]
					}
            }
        ]
      }
    },
    "ec2PublicSubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Fn::FindInMap" : [ "SubnetConfig", "Public2", "CIDR" ] },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "1", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"			: "Service",
                "Value"			: { "Ref" : "Service" }
            },
            {
                "Key"			: "Gateway",
                "Value"			: { "Fn::FindInMap" : [ "SubnetConfig", "Public2", "GW" ] }
            },
            {
                "Key"			: "Netmask",
                "Value"			: { "Fn::FindInMap" : [ "SubnetConfig", "Public2", "MASK" ] }
            },
            {
                "Key"			: "Name",
                "Value"			: { "Fn::Join" : [ "-",
					    [
					      { "Ref" : "Service" },
					      { "Ref" : "StackEnv" },
					       "public-az2",
					      { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
					    ]
					  ]
					}
            }
        ]
      }
    },

    "ec2PublicSubnetAZ3" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Fn::FindInMap" : [ "SubnetConfig", "Public3", "CIDR" ] },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "2", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"			: "Service",
                "Value"			: { "Ref" : "Service" }
            },
            {
                "Key"			: "Gateway",
                "Value"			: { "Fn::FindInMap" : [ "SubnetConfig", "Public3", "GW" ] }
            },
            {
                "Key"			: "Netmask",
                "Value"			: { "Fn::FindInMap" : [ "SubnetConfig", "Public3", "MASK" ] }
            },
            {
                "Key"			: "Name",
                "Value"			: { "Fn::Join" : [ "-",
					    [
					      { "Ref" : "Service" },
					      { "Ref" : "StackEnv" },
					       "public-az3",
					      { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
					    ]
					  ]
					}
            }
        ]
      }
    },

    "ec2PrivateSubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Fn::FindInMap" : [ "SubnetConfig", "Private1", "CIDR" ] },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "0", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"			: "Service",
                "Value"			: { "Ref" : "Service" }
            },
            {
                "Key"			: "Gateway",
                "Value"			: { "Fn::FindInMap" : [ "SubnetConfig", "Private1", "GW" ] }
            },
            {
                "Key"			: "Netmask",
                "Value"			: { "Fn::FindInMap" : [ "SubnetConfig", "Private1", "MASK" ] }
            },
            {
                "Key"			: "Name",
                "Value"			: { "Fn::Join" : [ "-",
					    [
					      { "Ref" : "Service" },
					      { "Ref" : "StackEnv" },
					       "private-az1",
					      { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
					    ]
					  ]
					}
            }
        ]
      }
    },
    "ec2PrivateSubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Fn::FindInMap" : [ "SubnetConfig", "Private2", "CIDR" ] },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "1", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"			: "Service",
                "Value"			: { "Ref" : "Service" }
            },
            {
                "Key"			: "Gateway",
                "Value"			: { "Fn::FindInMap" : [ "SubnetConfig", "Private2", "GW" ] }
            },
            {
                "Key"			: "Netmask",
                "Value"			: { "Fn::FindInMap" : [ "SubnetConfig", "Private2", "MASK" ] }
            },
            {
                "Key"			: "Name",
                "Value"			: { "Fn::Join" : [ "-",
					    [
					      { "Ref" : "Service" },
					      { "Ref" : "StackEnv" },
					       "private-az2",
					      { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
					    ]
					  ]
					}
            }
        ]
      }
    },

    "ec2PrivateSubnetAZ3" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Fn::FindInMap" : [ "SubnetConfig", "Private3", "CIDR" ] },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "2", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"			: "Service",
                "Value"			: { "Ref" : "Service" }
            },
            {
                "Key"			: "Gateway",
                "Value"			: { "Fn::FindInMap" : [ "SubnetConfig", "Private3", "GW" ] }
            },
            {
                "Key"			: "Netmask",
                "Value"			: { "Fn::FindInMap" : [ "SubnetConfig", "Private3", "MASK" ] }
            },
            {
                "Key"			: "Name",
                "Value"			: { "Fn::Join" : [ "-",
					    [
					      { "Ref" : "Service" },
					      { "Ref" : "StackEnv" },
					       "private-az3",
					      { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
					    ]
					  ]
					}
            }
        ]
      }
    },

    "ec2PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Name",
                "Value"			: { "Fn::Join" : [ "-",
					    [
					      { "Ref" : "Service" },
					      { "Ref" : "StackEnv" },
					       "public-rtb",
					      { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
					    ]
					  ]
					}
            }
        ]
      }
    },

    "ec2PrivateRouteTableAZ1" : {
      "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Name",
                "Value"			: { "Fn::Join" : [ "-",
					    [
					      { "Ref" : "Service" },
					      { "Ref" : "StackEnv" },
					       "private-rtb1",
					      { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
					    ]
					  ]
					}
            }
        ]
      }
    },
    "ec2PrivateRouteTableAZ2" : {
      "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Name",
                "Value"			: { "Fn::Join" : [ "-",
					    [
					      { "Ref" : "Service" },
					      { "Ref" : "StackEnv" },
					       "private-rtb2",
					      { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
					    ]
					  ]
					}
            }
        ]
      }
    },
    "ec2PrivateRouteTableAZ3" : {
      "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Name",
                "Value"			: { "Fn::Join" : [ "-",
					    [
					      { "Ref" : "Service" },
					      { "Ref" : "StackEnv" },
					       "private-rtb3",
					      { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
					    ]
					  ]
					}
            }
        ]
      }
    },

    "ec2PubDefaultRoute" : {
      "Type" : "AWS::EC2::Route",
        "Properties" : {
          "RouteTableId"		: { "Ref" : "ec2PublicRouteTable" },
          "DestinationCidrBlock"	: "0.0.0.0/0",
          "GatewayId"			: { "Ref" : "ec2InternetGW" }
      }
    },

    "ec2PriDefaultRouteAZ1" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : [ "ec2GatewayNAT1" ],
        "Properties" : {
          "RouteTableId"		: { "Ref" : "ec2PrivateRouteTableAZ1" },
          "DestinationCidrBlock"	: "0.0.0.0/0",
          "NatGatewayId"                : { "Ref" : "ec2GatewayNAT1" }
      }
    },
    "ec2PriDefaultRouteAZ2" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : [ "ec2GatewayNAT2" ],
        "Properties" : {
          "RouteTableId"		: { "Ref" : "ec2PrivateRouteTableAZ2" },
          "DestinationCidrBlock"	: "0.0.0.0/0",
          "NatGatewayId"                : { "Ref" : "ec2GatewayNAT2" }
      }
    },
    "ec2PriDefaultRouteAZ3" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : [ "ec2GatewayNAT3" ],
        "Properties" : {
          "RouteTableId"		: { "Ref" : "ec2PrivateRouteTableAZ3" },
          "DestinationCidrBlock"	: "0.0.0.0/0",
          "NatGatewayId"                : { "Ref" : "ec2GatewayNAT3" }
      }
    },

    "ec2PublicSubnetRouteTableAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PublicSubnetAZ1" },
          "RouteTableId"		: { "Ref" : "ec2PublicRouteTable" }
      }
    },
    "ec2PublicSubnetRouteTableAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PublicSubnetAZ2" },
          "RouteTableId"		: { "Ref" : "ec2PublicRouteTable" }
      }
    },
    "ec2PublicSubnetRouteTableAssocAZ3" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PublicSubnetAZ3" },
          "RouteTableId"		: { "Ref" : "ec2PublicRouteTable" }
      }
    },

    "ec2PrivateSubnetRouteTableAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PrivateSubnetAZ1" },
          "RouteTableId"		: { "Ref" : "ec2PrivateRouteTableAZ1" }
      }
    },
    "ec2PrivateSubnetRouteTableAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PrivateSubnetAZ2" },
          "RouteTableId"		: { "Ref" : "ec2PrivateRouteTableAZ2" }
      }
    },
    "ec2PrivateSubnetRouteTableAssocAZ3" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PrivateSubnetAZ3" },
          "RouteTableId"		: { "Ref" : "ec2PrivateRouteTableAZ3" }
      }
    },

    "ec2PublicSubnetNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Name",
                "Value"			: { "Fn::Join" : [ "-",
					    [
					      { "Ref" : "Service" },
					      { "Ref" : "StackEnv" },
					       "public-acl",
					      { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
					    ]
					  ]
					}
            }
        ]
      }
    },

    "ec2PublicSubnetAclEntryIn100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "100",
          "Protocol"			: "-1",
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ] }
        }
    },
    "ec2PublicSubnetAclEntryIn200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "200",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "443", "To" : "443" },
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PublicSubnetAclEntryIn300" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "300",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "80", "To" : "80" },
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PublicSubnetAclEntryIn400" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "400",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "1024", "To" : "65535" },
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PublicSubnetAclEntryOut100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "100",
          "Protocol"			: "-1",
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ] }
        }
    },
    "ec2PublicSubnetAclEntryOut200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "200",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "1024", "To" : "65535" },
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PublicSubnetAclEntryOut300" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "300",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "443", "To" : "443" },
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PublicSubnetAclEntryOut400" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "400",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "80", "To" : "80" },
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },

    "ec2PublicSubnetNetworkAclAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PublicSubnetAZ1" },
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" }
      }
    },
    "ec2PublicSubnetNetworkAclAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PublicSubnetAZ2" },
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" }
      }
    },
    "ec2PublicSubnetNetworkAclAssocAZ3" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PublicSubnetAZ3" },
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" }
      }
    },

    "ec2PrivateSubnetNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Name",
                "Value"			: { "Fn::Join" : [ "-",
					    [
					      { "Ref" : "Service" },
					      { "Ref" : "StackEnv" },
					       "private-acl",
					      { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
					    ]
					  ]
					}
            }
        ]
      }
    },

    "ec2PrivateSubnetAclEntryIn100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateSubnetNetworkAcl" },
          "RuleNumber"			: "100",
          "Protocol"			: "-1",
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ] }
        }
    },
    "ec2PrivateSubnetAclEntryIn200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateSubnetNetworkAcl" },
          "RuleNumber"			: "200",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "1024", "To" : "65535" },
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PrivateSubnetAclEntryOut100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateSubnetNetworkAcl" },
          "RuleNumber"			: "100",
          "Protocol"			: "-1",
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ] }
        }
    },
    "ec2PrivateSubnetAclEntryOut200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateSubnetNetworkAcl" },
          "RuleNumber"			: "200",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "443", "To" : "443" },
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PrivateSubnetAclEntryOut300" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateSubnetNetworkAcl" },
          "RuleNumber"			: "300",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "80", "To" : "80" },
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },

    "ec2PrivateSubnetNetworkAclAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PrivateSubnetAZ1" },
          "NetworkAclId"		: { "Ref" : "ec2PrivateSubnetNetworkAcl" }
      }
    },
    "ec2PrivateSubnetNetworkAclAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PrivateSubnetAZ2" },
          "NetworkAclId"		: { "Ref" : "ec2PrivateSubnetNetworkAcl" }
      }
    },
    "ec2PrivateSubnetNetworkAclAssocAZ3" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PrivateSubnetAZ3" },
          "NetworkAclId"		: { "Ref" : "ec2PrivateSubnetNetworkAcl" }
      }
    },

    "ec2IPAddressNAT1" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain"                        : "vpc"
      }
    },
    "ec2GatewayNAT1" : {
      "Type" : "AWS::EC2::NatGateway",
      "DependsOn" : [ "ec2IPAddressNAT1", "ec2PublicSubnetAZ1" ],
      "Properties" : {
      "AllocationId"			: { "Fn::GetAtt" : ["ec2IPAddressNAT1", "AllocationId"]},
      "SubnetId"			: { "Ref" : "ec2PublicSubnetAZ1"}
      }
    },

    "ec2IPAddressNAT2" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain"                        : "vpc"
      }
    },
    "ec2GatewayNAT2" : {
      "Type" : "AWS::EC2::NatGateway",
      "DependsOn" : [ "ec2IPAddressNAT2", "ec2PublicSubnetAZ2" ],
      "Properties" : {
      "AllocationId"			: { "Fn::GetAtt" : ["ec2IPAddressNAT2", "AllocationId"]},
      "SubnetId"			: { "Ref" : "ec2PublicSubnetAZ2"}
      }
    },

    "ec2IPAddressNAT3" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain"                        : "vpc"
      }
    },
    "ec2GatewayNAT3" : {
      "Type" : "AWS::EC2::NatGateway",
      "DependsOn" : [ "ec2IPAddressNAT3", "ec2PublicSubnetAZ3" ],
      "Properties" : {
      "AllocationId"			: { "Fn::GetAtt" : ["ec2IPAddressNAT3", "AllocationId"]},
      "SubnetId"			: { "Ref" : "ec2PublicSubnetAZ3"}
      }
    },

    "ec2InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription"              : "Security group for our zook instances.",
        "VpcId"                         : { "Ref" : "ec2VPC" },
        "Tags": [
          { "Key" : "Service", "Value" : { "Ref" : "Service" } },
          { "Key" : "Name", "Value" : "zook-test" }
        ],
        "SecurityGroupIngress" : [
          { "IpProtocol"                : "tcp",
            "FromPort"                  : "22",
            "ToPort"                    : "22",
            "CidrIp"                    : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ] }
          }
        ]
      }
    }
  },

  "Outputs" : {

    "VPCId" : {
      "Description"                     : "VPC Id",
      "Value"                           : { "Ref" : "ec2VPC" },
      "Export"				: { "Name" : { "Fn::Sub" : "${AWS::StackName}-VPC" } }
    },
    "GatewayIPAZ1" : {
      "Description"                     : "GatewayNAT1 Public IP",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              "IP for NAT1 is",
                                              { "Ref" : "ec2IPAddressNAT1" }
                                            ]
                                          ] }
    },
    "GatewayIPAZ2" : {
      "Description"                     : "GatewayNAT2 Public IP",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              "IP for NAT2 is",
                                              { "Ref" : "ec2IPAddressNAT2" }
                                            ]
                                          ] }
    },
    "GatewayIPAZ3" : {
      "Description"                     : "GatewayNAT3 Public IP",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              "IP for NAT3 is",
                                              { "Ref" : "ec2IPAddressNAT3" }
                                            ]
                                          ] }
    },
    "PubSubnetAZ1" : {
      "Description"                     : "Public Subnet Id for AZ1",
      "Value"                           : { "Ref" : "ec2PublicSubnetAZ1" },
      "Export"				: { "Name" : { "Fn::Sub" : "${AWS::StackName}-PubSubnetAZ1" } }
    },
    "PubSubnetAZ2" : {
      "Description"                     : "Public Subnet Id for AZ2",
      "Value"                           : { "Ref" : "ec2PublicSubnetAZ2" },
      "Export"				: { "Name" : { "Fn::Sub" : "${AWS::StackName}-PubSubnetAZ2" } }
    },
    "PubSubnetAZ3" : {
      "Description"                     : "Public Subnet Id for AZ3",
      "Value"                           : { "Ref" : "ec2PublicSubnetAZ3" },
      "Export"				: { "Name" : { "Fn::Sub" : "${AWS::StackName}-PubSubnetAZ3" } }
    },
    "PriSubnetAZ1" : {
      "Description"                     : "Private Subnet Id for AZ1",
      "Value"                           : { "Ref" : "ec2PrivateSubnetAZ1" },
      "Export"				: { "Name" : { "Fn::Sub" : "${AWS::StackName}-PriSubnetAZ1" } }
    },
    "PriSubnetAZ2" : {
      "Description"                     : "Private Subnet Id for AZ2",
      "Value"                           : { "Ref" : "ec2PrivateSubnetAZ2" },
      "Export"				: { "Name" : { "Fn::Sub" : "${AWS::StackName}-PriSubnetAZ2" } }
    },
    "PriSubnetAZ3" : {
      "Description"                     : "Private Subnet Id for AZ3",
      "Value"                           : { "Ref" : "ec2PrivateSubnetAZ3" },
      "Export"				: { "Name" : { "Fn::Sub" : "${AWS::StackName}-PriSubnetAZ3" } }
    },
    "InstanceSG" : {
      "Description"			: "Instance Security Group",
      "Value"				: { "Ref" : "ec2InstanceSecurityGroup" },
      "Export"				: { "Name" : { "Fn::Sub" : "${AWS::StackName}-SecurityGroup" } }
    },
    "InstanceService" : {
      "Description"			: "Instance Service",
      "Value"				: { "Ref" : "Service" },
      "Export"				: { "Name" : { "Fn::Sub" : "${AWS::StackName}-Service" } }
    }
  }
}
